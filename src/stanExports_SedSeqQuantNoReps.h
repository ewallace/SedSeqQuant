// Generated by rstantools.  Do not edit by hand.

/*
    SedSeqQuant is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    SedSeqQuant is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SedSeqQuant.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_SedSeqQuantNoReps_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_SedSeqQuantNoReps");
    reader.add_event(41, 39, "end", "model_SedSeqQuantNoReps");
    return reader;
}
#include <stan_meta_header.hpp>
class model_SedSeqQuantNoReps
  : public stan::model::model_base_crtp<model_SedSeqQuantNoReps> {
private:
        int NRNA;
        std::vector<int> tot_obs_counts;
        std::vector<int> sup_obs_counts;
        std::vector<int> pel_obs_counts;
        double mixing_factor_sup_guess_mean;
        double mixing_factor_sup_guess_sd;
        double mixing_factor_pellet_guess_mean;
        double mixing_factor_pellet_guess_sd;
public:
    model_SedSeqQuantNoReps(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_SedSeqQuantNoReps(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_SedSeqQuantNoReps_namespace::model_SedSeqQuantNoReps";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "NRNA", "int", context__.to_vec());
            NRNA = int(0);
            vals_i__ = context__.vals_i("NRNA");
            pos__ = 0;
            NRNA = vals_i__[pos__++];
            check_greater_or_equal(function__, "NRNA", NRNA, 1);
            current_statement_begin__ = 7;
            validate_non_negative_index("tot_obs_counts", "NRNA", NRNA);
            context__.validate_dims("data initialization", "tot_obs_counts", "int", context__.to_vec(NRNA));
            tot_obs_counts = std::vector<int>(NRNA, int(0));
            vals_i__ = context__.vals_i("tot_obs_counts");
            pos__ = 0;
            size_t tot_obs_counts_k_0_max__ = NRNA;
            for (size_t k_0__ = 0; k_0__ < tot_obs_counts_k_0_max__; ++k_0__) {
                tot_obs_counts[k_0__] = vals_i__[pos__++];
            }
            size_t tot_obs_counts_i_0_max__ = NRNA;
            for (size_t i_0__ = 0; i_0__ < tot_obs_counts_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "tot_obs_counts[i_0__]", tot_obs_counts[i_0__], 0);
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("sup_obs_counts", "NRNA", NRNA);
            context__.validate_dims("data initialization", "sup_obs_counts", "int", context__.to_vec(NRNA));
            sup_obs_counts = std::vector<int>(NRNA, int(0));
            vals_i__ = context__.vals_i("sup_obs_counts");
            pos__ = 0;
            size_t sup_obs_counts_k_0_max__ = NRNA;
            for (size_t k_0__ = 0; k_0__ < sup_obs_counts_k_0_max__; ++k_0__) {
                sup_obs_counts[k_0__] = vals_i__[pos__++];
            }
            size_t sup_obs_counts_i_0_max__ = NRNA;
            for (size_t i_0__ = 0; i_0__ < sup_obs_counts_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "sup_obs_counts[i_0__]", sup_obs_counts[i_0__], 0);
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("pel_obs_counts", "NRNA", NRNA);
            context__.validate_dims("data initialization", "pel_obs_counts", "int", context__.to_vec(NRNA));
            pel_obs_counts = std::vector<int>(NRNA, int(0));
            vals_i__ = context__.vals_i("pel_obs_counts");
            pos__ = 0;
            size_t pel_obs_counts_k_0_max__ = NRNA;
            for (size_t k_0__ = 0; k_0__ < pel_obs_counts_k_0_max__; ++k_0__) {
                pel_obs_counts[k_0__] = vals_i__[pos__++];
            }
            size_t pel_obs_counts_i_0_max__ = NRNA;
            for (size_t i_0__ = 0; i_0__ < pel_obs_counts_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "pel_obs_counts[i_0__]", pel_obs_counts[i_0__], 0);
            }
            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "mixing_factor_sup_guess_mean", "double", context__.to_vec());
            mixing_factor_sup_guess_mean = double(0);
            vals_r__ = context__.vals_r("mixing_factor_sup_guess_mean");
            pos__ = 0;
            mixing_factor_sup_guess_mean = vals_r__[pos__++];
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "mixing_factor_sup_guess_sd", "double", context__.to_vec());
            mixing_factor_sup_guess_sd = double(0);
            vals_r__ = context__.vals_r("mixing_factor_sup_guess_sd");
            pos__ = 0;
            mixing_factor_sup_guess_sd = vals_r__[pos__++];
            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "mixing_factor_pellet_guess_mean", "double", context__.to_vec());
            mixing_factor_pellet_guess_mean = double(0);
            vals_r__ = context__.vals_r("mixing_factor_pellet_guess_mean");
            pos__ = 0;
            mixing_factor_pellet_guess_mean = vals_r__[pos__++];
            current_statement_begin__ = 15;
            context__.validate_dims("data initialization", "mixing_factor_pellet_guess_sd", "double", context__.to_vec());
            mixing_factor_pellet_guess_sd = double(0);
            vals_r__ = context__.vals_r("mixing_factor_pellet_guess_sd");
            pos__ = 0;
            mixing_factor_pellet_guess_sd = vals_r__[pos__++];
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 20;
            num_params_r__ += 1;
            current_statement_begin__ = 21;
            num_params_r__ += 1;
            current_statement_begin__ = 24;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_SedSeqQuantNoReps() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 20;
        if (!(context__.contains_r("mixing_factor_sup")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mixing_factor_sup missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mixing_factor_sup");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mixing_factor_sup", "double", context__.to_vec());
        double mixing_factor_sup(0);
        mixing_factor_sup = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, mixing_factor_sup);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mixing_factor_sup: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 21;
        if (!(context__.contains_r("mixing_factor_pellet")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mixing_factor_pellet missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mixing_factor_pellet");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mixing_factor_pellet", "double", context__.to_vec());
        double mixing_factor_pellet(0);
        mixing_factor_pellet = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, mixing_factor_pellet);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mixing_factor_pellet: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 24;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "phi", "double", context__.to_vec());
        double phi(0);
        phi = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 20;
            local_scalar_t__ mixing_factor_sup;
            (void) mixing_factor_sup;  // dummy to suppress unused var warning
            if (jacobian__)
                mixing_factor_sup = in__.scalar_lb_constrain(0, lp__);
            else
                mixing_factor_sup = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 21;
            local_scalar_t__ mixing_factor_pellet;
            (void) mixing_factor_pellet;  // dummy to suppress unused var warning
            if (jacobian__)
                mixing_factor_pellet = in__.scalar_lb_constrain(0, lp__);
            else
                mixing_factor_pellet = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 24;
            local_scalar_t__ phi;
            (void) phi;  // dummy to suppress unused var warning
            if (jacobian__)
                phi = in__.scalar_lb_constrain(0, lp__);
            else
                phi = in__.scalar_lb_constrain(0);
            // model body
            current_statement_begin__ = 28;
            lp_accum__.add(normal_log<propto__>(mixing_factor_sup, mixing_factor_sup_guess_mean, mixing_factor_sup_guess_sd));
            current_statement_begin__ = 29;
            lp_accum__.add(normal_log<propto__>(mixing_factor_pellet, mixing_factor_pellet_guess_mean, mixing_factor_pellet_guess_sd));
            current_statement_begin__ = 32;
            lp_accum__.add(cauchy_log<propto__>(phi, 0, 3));
            current_statement_begin__ = 34;
            for (int idx = 1; idx <= NRNA; ++idx) {
                current_statement_begin__ = 36;
                lp_accum__.add(neg_binomial_2_log<propto__>(get_base1(tot_obs_counts, idx, "tot_obs_counts", 1), ((get_base1(sup_obs_counts, idx, "sup_obs_counts", 1) / mixing_factor_sup) + (get_base1(pel_obs_counts, idx, "pel_obs_counts", 1) / mixing_factor_pellet)), phi));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("mixing_factor_sup");
        names__.push_back("mixing_factor_pellet");
        names__.push_back("phi");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_SedSeqQuantNoReps_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double mixing_factor_sup = in__.scalar_lb_constrain(0);
        vars__.push_back(mixing_factor_sup);
        double mixing_factor_pellet = in__.scalar_lb_constrain(0);
        vars__.push_back(mixing_factor_pellet);
        double phi = in__.scalar_lb_constrain(0);
        vars__.push_back(phi);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_SedSeqQuantNoReps";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mixing_factor_sup";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mixing_factor_pellet";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "mixing_factor_sup";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "mixing_factor_pellet";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_SedSeqQuantNoReps_namespace::model_SedSeqQuantNoReps stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
