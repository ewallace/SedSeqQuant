// Generated by rstantools.  Do not edit by hand.

/*
    SedSeqQuant is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    SedSeqQuant is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SedSeqQuant.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_SedSeqQuantReps_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'SedSeqQuantReps', line 23, column 2 to column 42)",
                                                      " (in 'SedSeqQuantReps', line 24, column 2 to column 40)",
                                                      " (in 'SedSeqQuantReps', line 25, column 2 to column 43)",
                                                      " (in 'SedSeqQuantReps', line 28, column 2 to column 23)",
                                                      " (in 'SedSeqQuantReps', line 30, column 2 to column 40)",
                                                      " (in 'SedSeqQuantReps', line 32, column 2 to column 20)",
                                                      " (in 'SedSeqQuantReps', line 35, column 2 to column 18)",
                                                      " (in 'SedSeqQuantReps', line 38, column 4 to column 37)",
                                                      " (in 'SedSeqQuantReps', line 37, column 20 to line 39, column 3)",
                                                      " (in 'SedSeqQuantReps', line 37, column 2 to line 39, column 3)",
                                                      " (in 'SedSeqQuantReps', line 43, column 2 to column 20)",
                                                      " (in 'SedSeqQuantReps', line 45, column 2 to column 23)",
                                                      " (in 'SedSeqQuantReps', line 48, column 4 to column 79)",
                                                      " (in 'SedSeqQuantReps', line 47, column 20 to line 49, column 3)",
                                                      " (in 'SedSeqQuantReps', line 47, column 2 to line 49, column 3)",
                                                      " (in 'SedSeqQuantReps', line 50, column 2 to column 92)",
                                                      " (in 'SedSeqQuantReps', line 51, column 2 to column 86)",
                                                      " (in 'SedSeqQuantReps', line 52, column 2 to column 95)",
                                                      " (in 'SedSeqQuantReps', line 55, column 6 to column 111)",
                                                      " (in 'SedSeqQuantReps', line 56, column 6 to column 120)",
                                                      " (in 'SedSeqQuantReps', line 57, column 6 to column 103)",
                                                      " (in 'SedSeqQuantReps', line 54, column 22 to line 58, column 5)",
                                                      " (in 'SedSeqQuantReps', line 54, column 4 to line 58, column 5)",
                                                      " (in 'SedSeqQuantReps', line 53, column 22 to line 59, column 3)",
                                                      " (in 'SedSeqQuantReps', line 53, column 2 to line 59, column 3)",
                                                      " (in 'SedSeqQuantReps', line 3, column 2 to column 20)",
                                                      " (in 'SedSeqQuantReps', line 5, column 2 to column 20)",
                                                      " (in 'SedSeqQuantReps', line 8, column 30 to column 34)",
                                                      " (in 'SedSeqQuantReps', line 8, column 35 to column 39)",
                                                      " (in 'SedSeqQuantReps', line 8, column 2 to column 41)",
                                                      " (in 'SedSeqQuantReps', line 9, column 30 to column 34)",
                                                      " (in 'SedSeqQuantReps', line 9, column 35 to column 39)",
                                                      " (in 'SedSeqQuantReps', line 9, column 2 to column 41)",
                                                      " (in 'SedSeqQuantReps', line 10, column 30 to column 34)",
                                                      " (in 'SedSeqQuantReps', line 10, column 35 to column 39)",
                                                      " (in 'SedSeqQuantReps', line 10, column 2 to column 41)",
                                                      " (in 'SedSeqQuantReps', line 11, column 24 to column 28)",
                                                      " (in 'SedSeqQuantReps', line 11, column 2 to column 30)",
                                                      " (in 'SedSeqQuantReps', line 12, column 22 to column 26)",
                                                      " (in 'SedSeqQuantReps', line 12, column 2 to column 28)",
                                                      " (in 'SedSeqQuantReps', line 14, column 2 to column 38)",
                                                      " (in 'SedSeqQuantReps', line 15, column 2 to column 36)",
                                                      " (in 'SedSeqQuantReps', line 16, column 2 to column 36)",
                                                      " (in 'SedSeqQuantReps', line 17, column 2 to column 34)",
                                                      " (in 'SedSeqQuantReps', line 18, column 2 to column 39)",
                                                      " (in 'SedSeqQuantReps', line 19, column 2 to column 37)",
                                                      " (in 'SedSeqQuantReps', line 23, column 36 to column 40)",
                                                      " (in 'SedSeqQuantReps', line 24, column 34 to column 38)",
                                                      " (in 'SedSeqQuantReps', line 25, column 37 to column 41)",
                                                      " (in 'SedSeqQuantReps', line 30, column 34 to column 38)",
                                                      " (in 'SedSeqQuantReps', line 32, column 14 to column 18)",
                                                      " (in 'SedSeqQuantReps', line 35, column 12 to column 16)"};
#include <stan_meta_header.hpp>
class model_SedSeqQuantReps final : public model_base_crtp<model_SedSeqQuantReps> {
private:
  int NRNA;
  int NREP;
  std::vector<std::vector<int>> tot_obs_counts;
  std::vector<std::vector<int>> sup_obs_counts;
  std::vector<std::vector<int>> pel_obs_counts;
  std::vector<double> mean_log_tot_obs;
  std::vector<double> sd_log_tot_obs;
  double mixing_factor_total_guess_mean;
  double mixing_factor_total_guess_sd;
  double mixing_factor_sup_guess_mean;
  double mixing_factor_sup_guess_sd;
  double mixing_factor_pellet_guess_mean;
  double mixing_factor_pellet_guess_sd;
 
public:
  ~model_SedSeqQuantReps() { }
  
  inline std::string model_name() const final { return "model_SedSeqQuantReps"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_SedSeqQuantReps(stan::io::var_context& context__,
                        unsigned int random_seed__ = 0,
                        std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_SedSeqQuantReps_namespace::model_SedSeqQuantReps";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 26;
      context__.validate_dims("data initialization","NRNA","int",
          context__.to_vec());
      NRNA = std::numeric_limits<int>::min();
      
      current_statement__ = 26;
      NRNA = context__.vals_i("NRNA")[(1 - 1)];
      current_statement__ = 26;
      current_statement__ = 26;
      check_greater_or_equal(function__, "NRNA", NRNA, 1);
      current_statement__ = 27;
      context__.validate_dims("data initialization","NREP","int",
          context__.to_vec());
      NREP = std::numeric_limits<int>::min();
      
      current_statement__ = 27;
      NREP = context__.vals_i("NREP")[(1 - 1)];
      current_statement__ = 27;
      current_statement__ = 27;
      check_greater_or_equal(function__, "NREP", NREP, 1);
      current_statement__ = 28;
      validate_non_negative_index("tot_obs_counts", "NRNA", NRNA);
      current_statement__ = 29;
      validate_non_negative_index("tot_obs_counts", "NREP", NREP);
      current_statement__ = 30;
      context__.validate_dims("data initialization","tot_obs_counts","int",
          context__.to_vec(NRNA, NREP));
      tot_obs_counts = std::vector<std::vector<int>>(NRNA, std::vector<int>(NREP, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> tot_obs_counts_flat__;
        current_statement__ = 30;
        assign(tot_obs_counts_flat__, nil_index_list(),
          context__.vals_i("tot_obs_counts"),
          "assigning variable tot_obs_counts_flat__");
        current_statement__ = 30;
        pos__ = 1;
        current_statement__ = 30;
        for (int sym1__ = 1; sym1__ <= NREP; ++sym1__) {
          current_statement__ = 30;
          for (int sym2__ = 1; sym2__ <= NRNA; ++sym2__) {
            current_statement__ = 30;
            assign(tot_obs_counts,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              tot_obs_counts_flat__[(pos__ - 1)],
              "assigning variable tot_obs_counts");
            current_statement__ = 30;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 30;
      for (int sym1__ = 1; sym1__ <= NRNA; ++sym1__) {
        current_statement__ = 30;
        for (int sym2__ = 1; sym2__ <= NREP; ++sym2__) {
          current_statement__ = 30;
          current_statement__ = 30;
          check_greater_or_equal(function__,
                                 "tot_obs_counts[sym1__, sym2__]",
                                 tot_obs_counts[(sym1__ - 1)][(sym2__ - 1)],
                                 0);}}
      current_statement__ = 31;
      validate_non_negative_index("sup_obs_counts", "NRNA", NRNA);
      current_statement__ = 32;
      validate_non_negative_index("sup_obs_counts", "NREP", NREP);
      current_statement__ = 33;
      context__.validate_dims("data initialization","sup_obs_counts","int",
          context__.to_vec(NRNA, NREP));
      sup_obs_counts = std::vector<std::vector<int>>(NRNA, std::vector<int>(NREP, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> sup_obs_counts_flat__;
        current_statement__ = 33;
        assign(sup_obs_counts_flat__, nil_index_list(),
          context__.vals_i("sup_obs_counts"),
          "assigning variable sup_obs_counts_flat__");
        current_statement__ = 33;
        pos__ = 1;
        current_statement__ = 33;
        for (int sym1__ = 1; sym1__ <= NREP; ++sym1__) {
          current_statement__ = 33;
          for (int sym2__ = 1; sym2__ <= NRNA; ++sym2__) {
            current_statement__ = 33;
            assign(sup_obs_counts,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              sup_obs_counts_flat__[(pos__ - 1)],
              "assigning variable sup_obs_counts");
            current_statement__ = 33;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 33;
      for (int sym1__ = 1; sym1__ <= NRNA; ++sym1__) {
        current_statement__ = 33;
        for (int sym2__ = 1; sym2__ <= NREP; ++sym2__) {
          current_statement__ = 33;
          current_statement__ = 33;
          check_greater_or_equal(function__,
                                 "sup_obs_counts[sym1__, sym2__]",
                                 sup_obs_counts[(sym1__ - 1)][(sym2__ - 1)],
                                 0);}}
      current_statement__ = 34;
      validate_non_negative_index("pel_obs_counts", "NRNA", NRNA);
      current_statement__ = 35;
      validate_non_negative_index("pel_obs_counts", "NREP", NREP);
      current_statement__ = 36;
      context__.validate_dims("data initialization","pel_obs_counts","int",
          context__.to_vec(NRNA, NREP));
      pel_obs_counts = std::vector<std::vector<int>>(NRNA, std::vector<int>(NREP, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> pel_obs_counts_flat__;
        current_statement__ = 36;
        assign(pel_obs_counts_flat__, nil_index_list(),
          context__.vals_i("pel_obs_counts"),
          "assigning variable pel_obs_counts_flat__");
        current_statement__ = 36;
        pos__ = 1;
        current_statement__ = 36;
        for (int sym1__ = 1; sym1__ <= NREP; ++sym1__) {
          current_statement__ = 36;
          for (int sym2__ = 1; sym2__ <= NRNA; ++sym2__) {
            current_statement__ = 36;
            assign(pel_obs_counts,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              pel_obs_counts_flat__[(pos__ - 1)],
              "assigning variable pel_obs_counts");
            current_statement__ = 36;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 36;
      for (int sym1__ = 1; sym1__ <= NRNA; ++sym1__) {
        current_statement__ = 36;
        for (int sym2__ = 1; sym2__ <= NREP; ++sym2__) {
          current_statement__ = 36;
          current_statement__ = 36;
          check_greater_or_equal(function__,
                                 "pel_obs_counts[sym1__, sym2__]",
                                 pel_obs_counts[(sym1__ - 1)][(sym2__ - 1)],
                                 0);}}
      current_statement__ = 37;
      validate_non_negative_index("mean_log_tot_obs", "NRNA", NRNA);
      current_statement__ = 38;
      context__.validate_dims("data initialization","mean_log_tot_obs",
          "double",context__.to_vec(NRNA));
      mean_log_tot_obs = std::vector<double>(NRNA, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 38;
      assign(mean_log_tot_obs, nil_index_list(),
        context__.vals_r("mean_log_tot_obs"),
        "assigning variable mean_log_tot_obs");
      current_statement__ = 39;
      validate_non_negative_index("sd_log_tot_obs", "NRNA", NRNA);
      current_statement__ = 40;
      context__.validate_dims("data initialization","sd_log_tot_obs",
          "double",context__.to_vec(NRNA));
      sd_log_tot_obs = std::vector<double>(NRNA, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 40;
      assign(sd_log_tot_obs, nil_index_list(),
        context__.vals_r("sd_log_tot_obs"),
        "assigning variable sd_log_tot_obs");
      current_statement__ = 41;
      context__.validate_dims("data initialization",
          "mixing_factor_total_guess_mean","double",context__.to_vec());
      mixing_factor_total_guess_mean = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 41;
      mixing_factor_total_guess_mean = context__.vals_r("mixing_factor_total_guess_mean")[
          (1 - 1)];
      current_statement__ = 42;
      context__.validate_dims("data initialization",
          "mixing_factor_total_guess_sd","double",context__.to_vec());
      mixing_factor_total_guess_sd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 42;
      mixing_factor_total_guess_sd = context__.vals_r("mixing_factor_total_guess_sd")[
          (1 - 1)];
      current_statement__ = 43;
      context__.validate_dims("data initialization",
          "mixing_factor_sup_guess_mean","double",context__.to_vec());
      mixing_factor_sup_guess_mean = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 43;
      mixing_factor_sup_guess_mean = context__.vals_r("mixing_factor_sup_guess_mean")[
          (1 - 1)];
      current_statement__ = 44;
      context__.validate_dims("data initialization",
          "mixing_factor_sup_guess_sd","double",context__.to_vec());
      mixing_factor_sup_guess_sd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 44;
      mixing_factor_sup_guess_sd = context__.vals_r("mixing_factor_sup_guess_sd")[
          (1 - 1)];
      current_statement__ = 45;
      context__.validate_dims("data initialization",
          "mixing_factor_pellet_guess_mean","double",context__.to_vec());
      mixing_factor_pellet_guess_mean = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 45;
      mixing_factor_pellet_guess_mean = context__.vals_r("mixing_factor_pellet_guess_mean")[
          (1 - 1)];
      current_statement__ = 46;
      context__.validate_dims("data initialization",
          "mixing_factor_pellet_guess_sd","double",context__.to_vec());
      mixing_factor_pellet_guess_sd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 46;
      mixing_factor_pellet_guess_sd = context__.vals_r("mixing_factor_pellet_guess_sd")[
          (1 - 1)];
      current_statement__ = 47;
      validate_non_negative_index("mixing_factor_total", "NREP", NREP);
      current_statement__ = 48;
      validate_non_negative_index("mixing_factor_sup", "NREP", NREP);
      current_statement__ = 49;
      validate_non_negative_index("mixing_factor_pellet", "NREP", NREP);
      current_statement__ = 50;
      validate_non_negative_index("tot_latent_counts", "NRNA", NRNA);
      current_statement__ = 51;
      validate_non_negative_index("lopSup", "NRNA", NRNA);
      current_statement__ = 52;
      validate_non_negative_index("pSup", "NRNA", NRNA);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += NREP;
      num_params_r__ += NREP;
      num_params_r__ += NREP;
      num_params_r__ += 3;
      num_params_r__ += NRNA;
      num_params_r__ += NRNA;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_SedSeqQuantReps_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> mixing_factor_total;
      mixing_factor_total = std::vector<local_scalar_t__>(NREP, DUMMY_VAR__);
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= NREP; ++sym1__) {
        current_statement__ = 1;
        assign(mixing_factor_total,
          cons_list(index_uni(sym1__), nil_index_list()), in__.scalar(),
          "assigning variable mixing_factor_total");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= NREP; ++sym1__) {
        current_statement__ = 1;
        if (jacobian__) {
          current_statement__ = 1;
          assign(mixing_factor_total,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(mixing_factor_total[(sym1__ - 1)], 0,
              lp__), "assigning variable mixing_factor_total");
        } else {
          current_statement__ = 1;
          assign(mixing_factor_total,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(mixing_factor_total[(sym1__ - 1)], 0),
            "assigning variable mixing_factor_total");
        }}
      std::vector<local_scalar_t__> mixing_factor_sup;
      mixing_factor_sup = std::vector<local_scalar_t__>(NREP, DUMMY_VAR__);
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= NREP; ++sym1__) {
        current_statement__ = 2;
        assign(mixing_factor_sup,
          cons_list(index_uni(sym1__), nil_index_list()), in__.scalar(),
          "assigning variable mixing_factor_sup");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= NREP; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(mixing_factor_sup,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(mixing_factor_sup[(sym1__ - 1)], 0, lp__),
            "assigning variable mixing_factor_sup");
        } else {
          current_statement__ = 2;
          assign(mixing_factor_sup,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(mixing_factor_sup[(sym1__ - 1)], 0),
            "assigning variable mixing_factor_sup");
        }}
      std::vector<local_scalar_t__> mixing_factor_pellet;
      mixing_factor_pellet = std::vector<local_scalar_t__>(NREP, DUMMY_VAR__);
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= NREP; ++sym1__) {
        current_statement__ = 3;
        assign(mixing_factor_pellet,
          cons_list(index_uni(sym1__), nil_index_list()), in__.scalar(),
          "assigning variable mixing_factor_pellet");}
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= NREP; ++sym1__) {
        current_statement__ = 3;
        if (jacobian__) {
          current_statement__ = 3;
          assign(mixing_factor_pellet,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(mixing_factor_pellet[(sym1__ - 1)], 0,
              lp__), "assigning variable mixing_factor_pellet");
        } else {
          current_statement__ = 3;
          assign(mixing_factor_pellet,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(mixing_factor_pellet[(sym1__ - 1)], 0),
            "assigning variable mixing_factor_pellet");
        }}
      std::vector<local_scalar_t__> phi;
      phi = std::vector<local_scalar_t__>(3, DUMMY_VAR__);
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 4;
        assign(phi, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable phi");}
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 4;
        if (jacobian__) {
          current_statement__ = 4;
          assign(phi, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(phi[(sym1__ - 1)], 0, lp__),
            "assigning variable phi");
        } else {
          current_statement__ = 4;
          assign(phi, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(phi[(sym1__ - 1)], 0),
            "assigning variable phi");
        }}
      std::vector<local_scalar_t__> tot_latent_counts;
      tot_latent_counts = std::vector<local_scalar_t__>(NRNA, DUMMY_VAR__);
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= NRNA; ++sym1__) {
        current_statement__ = 5;
        assign(tot_latent_counts,
          cons_list(index_uni(sym1__), nil_index_list()), in__.scalar(),
          "assigning variable tot_latent_counts");}
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= NRNA; ++sym1__) {
        current_statement__ = 5;
        if (jacobian__) {
          current_statement__ = 5;
          assign(tot_latent_counts,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(tot_latent_counts[(sym1__ - 1)], 0, lp__),
            "assigning variable tot_latent_counts");
        } else {
          current_statement__ = 5;
          assign(tot_latent_counts,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(tot_latent_counts[(sym1__ - 1)], 0),
            "assigning variable tot_latent_counts");
        }}
      std::vector<local_scalar_t__> lopSup;
      lopSup = std::vector<local_scalar_t__>(NRNA, DUMMY_VAR__);
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= NRNA; ++sym1__) {
        current_statement__ = 6;
        assign(lopSup, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable lopSup");}
      std::vector<local_scalar_t__> pSup;
      pSup = std::vector<local_scalar_t__>(NRNA, DUMMY_VAR__);
      
      current_statement__ = 10;
      for (int i = 1; i <= NRNA; ++i) {
        current_statement__ = 8;
        assign(pSup, cons_list(index_uni(i), nil_index_list()),
          inv_logit(lopSup[(i - 1)]), "assigning variable pSup");}
      {
        current_statement__ = 11;
        lp_accum__.add(cauchy_lpdf<propto__>(phi, 0, 3));
        current_statement__ = 12;
        lp_accum__.add(normal_lpdf<propto__>(lopSup, 0, 3));
        current_statement__ = 15;
        for (int i = 1; i <= NRNA; ++i) {
          current_statement__ = 13;
          lp_accum__.add(
            normal_lpdf<propto__>(
              stan::math::log(tot_latent_counts[(i - 1)]),
              mean_log_tot_obs[(i - 1)], sd_log_tot_obs[(i - 1)]));}
        current_statement__ = 16;
        lp_accum__.add(
          normal_lpdf<propto__>(mixing_factor_total,
            mixing_factor_total_guess_mean, mixing_factor_total_guess_sd));
        current_statement__ = 17;
        lp_accum__.add(
          normal_lpdf<propto__>(mixing_factor_sup,
            mixing_factor_sup_guess_mean, mixing_factor_sup_guess_sd));
        current_statement__ = 18;
        lp_accum__.add(
          normal_lpdf<propto__>(mixing_factor_pellet,
            mixing_factor_pellet_guess_mean, mixing_factor_pellet_guess_sd));
        current_statement__ = 25;
        for (int rep = 1; rep <= NREP; ++rep) {
          current_statement__ = 23;
          for (int i = 1; i <= NRNA; ++i) {
            current_statement__ = 19;
            lp_accum__.add(
              neg_binomial_2_lpmf<propto__>(
                sup_obs_counts[(i - 1)][(rep - 1)],
                ((tot_latent_counts[(i - 1)] * pSup[(i - 1)]) *
                  mixing_factor_sup[(rep - 1)]), phi[(1 - 1)]));
            current_statement__ = 20;
            lp_accum__.add(
              neg_binomial_2_lpmf<propto__>(
                pel_obs_counts[(i - 1)][(rep - 1)],
                ((tot_latent_counts[(i - 1)] * (1 - pSup[(i - 1)])) *
                  mixing_factor_pellet[(rep - 1)]), phi[(2 - 1)]));
            current_statement__ = 21;
            lp_accum__.add(
              neg_binomial_2_lpmf<propto__>(
                tot_obs_counts[(i - 1)][(rep - 1)],
                (mixing_factor_total[(rep - 1)] * tot_latent_counts[(i - 1)]),
                phi[(3 - 1)]));}}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_SedSeqQuantReps_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<double> mixing_factor_total;
      mixing_factor_total = std::vector<double>(NREP, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= NREP; ++sym1__) {
        current_statement__ = 1;
        assign(mixing_factor_total,
          cons_list(index_uni(sym1__), nil_index_list()), in__.scalar(),
          "assigning variable mixing_factor_total");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= NREP; ++sym1__) {
        current_statement__ = 1;
        assign(mixing_factor_total,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(mixing_factor_total[(sym1__ - 1)], 0),
          "assigning variable mixing_factor_total");}
      std::vector<double> mixing_factor_sup;
      mixing_factor_sup = std::vector<double>(NREP, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= NREP; ++sym1__) {
        current_statement__ = 2;
        assign(mixing_factor_sup,
          cons_list(index_uni(sym1__), nil_index_list()), in__.scalar(),
          "assigning variable mixing_factor_sup");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= NREP; ++sym1__) {
        current_statement__ = 2;
        assign(mixing_factor_sup,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(mixing_factor_sup[(sym1__ - 1)], 0),
          "assigning variable mixing_factor_sup");}
      std::vector<double> mixing_factor_pellet;
      mixing_factor_pellet = std::vector<double>(NREP, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= NREP; ++sym1__) {
        current_statement__ = 3;
        assign(mixing_factor_pellet,
          cons_list(index_uni(sym1__), nil_index_list()), in__.scalar(),
          "assigning variable mixing_factor_pellet");}
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= NREP; ++sym1__) {
        current_statement__ = 3;
        assign(mixing_factor_pellet,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(mixing_factor_pellet[(sym1__ - 1)], 0),
          "assigning variable mixing_factor_pellet");}
      std::vector<double> phi;
      phi = std::vector<double>(3, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 4;
        assign(phi, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable phi");}
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 4;
        assign(phi, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(phi[(sym1__ - 1)], 0),
          "assigning variable phi");}
      std::vector<double> tot_latent_counts;
      tot_latent_counts = std::vector<double>(NRNA, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= NRNA; ++sym1__) {
        current_statement__ = 5;
        assign(tot_latent_counts,
          cons_list(index_uni(sym1__), nil_index_list()), in__.scalar(),
          "assigning variable tot_latent_counts");}
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= NRNA; ++sym1__) {
        current_statement__ = 5;
        assign(tot_latent_counts,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(tot_latent_counts[(sym1__ - 1)], 0),
          "assigning variable tot_latent_counts");}
      std::vector<double> lopSup;
      lopSup = std::vector<double>(NRNA, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= NRNA; ++sym1__) {
        current_statement__ = 6;
        assign(lopSup, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable lopSup");}
      std::vector<double> pSup;
      pSup = std::vector<double>(NRNA, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= NREP; ++sym1__) {
        vars__.emplace_back(mixing_factor_total[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= NREP; ++sym1__) {
        vars__.emplace_back(mixing_factor_sup[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= NREP; ++sym1__) {
        vars__.emplace_back(mixing_factor_pellet[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        vars__.emplace_back(phi[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= NRNA; ++sym1__) {
        vars__.emplace_back(tot_latent_counts[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= NRNA; ++sym1__) {
        vars__.emplace_back(lopSup[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 10;
      for (int i = 1; i <= NRNA; ++i) {
        current_statement__ = 8;
        assign(pSup, cons_list(index_uni(i), nil_index_list()),
          inv_logit(lopSup[(i - 1)]), "assigning variable pSup");}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= NRNA; ++sym1__) {
          vars__.emplace_back(pSup[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<double> mixing_factor_total;
      mixing_factor_total = std::vector<double>(NREP, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      assign(mixing_factor_total, nil_index_list(),
        context__.vals_r("mixing_factor_total"),
        "assigning variable mixing_factor_total");
      std::vector<double> mixing_factor_total_free__;
      mixing_factor_total_free__ = std::vector<double>(NREP, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= NREP; ++sym1__) {
        current_statement__ = 1;
        assign(mixing_factor_total_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(mixing_factor_total[(sym1__ - 1)], 0),
          "assigning variable mixing_factor_total_free__");}
      std::vector<double> mixing_factor_sup;
      mixing_factor_sup = std::vector<double>(NREP, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      assign(mixing_factor_sup, nil_index_list(),
        context__.vals_r("mixing_factor_sup"),
        "assigning variable mixing_factor_sup");
      std::vector<double> mixing_factor_sup_free__;
      mixing_factor_sup_free__ = std::vector<double>(NREP, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= NREP; ++sym1__) {
        current_statement__ = 2;
        assign(mixing_factor_sup_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(mixing_factor_sup[(sym1__ - 1)], 0),
          "assigning variable mixing_factor_sup_free__");}
      std::vector<double> mixing_factor_pellet;
      mixing_factor_pellet = std::vector<double>(NREP, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      assign(mixing_factor_pellet, nil_index_list(),
        context__.vals_r("mixing_factor_pellet"),
        "assigning variable mixing_factor_pellet");
      std::vector<double> mixing_factor_pellet_free__;
      mixing_factor_pellet_free__ = std::vector<double>(NREP, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= NREP; ++sym1__) {
        current_statement__ = 3;
        assign(mixing_factor_pellet_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(mixing_factor_pellet[(sym1__ - 1)], 0),
          "assigning variable mixing_factor_pellet_free__");}
      std::vector<double> phi;
      phi = std::vector<double>(3, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      assign(phi, nil_index_list(), context__.vals_r("phi"),
        "assigning variable phi");
      std::vector<double> phi_free__;
      phi_free__ = std::vector<double>(3, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        current_statement__ = 4;
        assign(phi_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(phi[(sym1__ - 1)], 0),
          "assigning variable phi_free__");}
      std::vector<double> tot_latent_counts;
      tot_latent_counts = std::vector<double>(NRNA, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      assign(tot_latent_counts, nil_index_list(),
        context__.vals_r("tot_latent_counts"),
        "assigning variable tot_latent_counts");
      std::vector<double> tot_latent_counts_free__;
      tot_latent_counts_free__ = std::vector<double>(NRNA, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= NRNA; ++sym1__) {
        current_statement__ = 5;
        assign(tot_latent_counts_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(tot_latent_counts[(sym1__ - 1)], 0),
          "assigning variable tot_latent_counts_free__");}
      std::vector<double> lopSup;
      lopSup = std::vector<double>(NRNA, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      assign(lopSup, nil_index_list(), context__.vals_r("lopSup"),
        "assigning variable lopSup");
      for (int sym1__ = 1; sym1__ <= NREP; ++sym1__) {
        vars__.emplace_back(mixing_factor_total_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= NREP; ++sym1__) {
        vars__.emplace_back(mixing_factor_sup_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= NREP; ++sym1__) {
        vars__.emplace_back(mixing_factor_pellet_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        vars__.emplace_back(phi_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= NRNA; ++sym1__) {
        vars__.emplace_back(tot_latent_counts_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= NRNA; ++sym1__) {
        vars__.emplace_back(lopSup[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("mixing_factor_total");
    names__.emplace_back("mixing_factor_sup");
    names__.emplace_back("mixing_factor_pellet");
    names__.emplace_back("phi");
    names__.emplace_back("tot_latent_counts");
    names__.emplace_back("lopSup");
    names__.emplace_back("pSup");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(NREP)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(NREP)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(NREP)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(3)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(NRNA)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(NRNA)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(NRNA)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= NREP; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mixing_factor_total" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= NREP; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mixing_factor_sup" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= NREP; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mixing_factor_pellet" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= NRNA; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "tot_latent_counts" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= NRNA; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lopSup" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= NRNA; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "pSup" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= NREP; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mixing_factor_total" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= NREP; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mixing_factor_sup" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= NREP; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mixing_factor_pellet" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= NRNA; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "tot_latent_counts" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= NRNA; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lopSup" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= NRNA; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "pSup" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"mixing_factor_total\",\"type\":{\"name\":\"array\",\"length\":" << NREP << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mixing_factor_sup\",\"type\":{\"name\":\"array\",\"length\":" << NREP << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mixing_factor_pellet\",\"type\":{\"name\":\"array\",\"length\":" << NREP << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"array\",\"length\":" << 3 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"tot_latent_counts\",\"type\":{\"name\":\"array\",\"length\":" << NRNA << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"lopSup\",\"type\":{\"name\":\"array\",\"length\":" << NRNA << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pSup\",\"type\":{\"name\":\"array\",\"length\":" << NRNA << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"mixing_factor_total\",\"type\":{\"name\":\"array\",\"length\":" << NREP << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mixing_factor_sup\",\"type\":{\"name\":\"array\",\"length\":" << NREP << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mixing_factor_pellet\",\"type\":{\"name\":\"array\",\"length\":" << NREP << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"array\",\"length\":" << 3 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"tot_latent_counts\",\"type\":{\"name\":\"array\",\"length\":" << NRNA << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"lopSup\",\"type\":{\"name\":\"array\",\"length\":" << NRNA << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"pSup\",\"type\":{\"name\":\"array\",\"length\":" << NRNA << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_SedSeqQuantReps_namespace::model_SedSeqQuantReps;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_SedSeqQuantReps_namespace::profiles__;
}
#endif
#endif
