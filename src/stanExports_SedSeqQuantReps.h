// Generated by rstantools.  Do not edit by hand.

/*
    SedSeqQuant is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    SedSeqQuant is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SedSeqQuant.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_SedSeqQuantReps_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_SedSeqQuantReps");
    reader.add_event(78, 76, "end", "model_SedSeqQuantReps");
    return reader;
}
#include <stan_meta_header.hpp>
class model_SedSeqQuantReps
  : public stan::model::model_base_crtp<model_SedSeqQuantReps> {
private:
        int NRNA;
        int NREP;
        std::vector<std::vector<int> > tot_obs_counts;
        std::vector<std::vector<int> > sup_obs_counts;
        std::vector<std::vector<int> > pel_obs_counts;
        std::vector<double> mean_log_tot_obs;
        std::vector<double> sd_log_tot_obs;
        double mixing_factor_total_guess_mean;
        double mixing_factor_total_guess_sd;
        double mixing_factor_sup_guess_mean;
        double mixing_factor_sup_guess_sd;
        double mixing_factor_pellet_guess_mean;
        double mixing_factor_pellet_guess_sd;
public:
    model_SedSeqQuantReps(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_SedSeqQuantReps(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_SedSeqQuantReps_namespace::model_SedSeqQuantReps";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "NRNA", "int", context__.to_vec());
            NRNA = int(0);
            vals_i__ = context__.vals_i("NRNA");
            pos__ = 0;
            NRNA = vals_i__[pos__++];
            check_greater_or_equal(function__, "NRNA", NRNA, 1);
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "NREP", "int", context__.to_vec());
            NREP = int(0);
            vals_i__ = context__.vals_i("NREP");
            pos__ = 0;
            NREP = vals_i__[pos__++];
            check_greater_or_equal(function__, "NREP", NREP, 1);
            current_statement_begin__ = 10;
            validate_non_negative_index("tot_obs_counts", "NRNA", NRNA);
            validate_non_negative_index("tot_obs_counts", "NREP", NREP);
            context__.validate_dims("data initialization", "tot_obs_counts", "int", context__.to_vec(NRNA,NREP));
            tot_obs_counts = std::vector<std::vector<int> >(NRNA, std::vector<int>(NREP, int(0)));
            vals_i__ = context__.vals_i("tot_obs_counts");
            pos__ = 0;
            size_t tot_obs_counts_k_0_max__ = NRNA;
            size_t tot_obs_counts_k_1_max__ = NREP;
            for (size_t k_1__ = 0; k_1__ < tot_obs_counts_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < tot_obs_counts_k_0_max__; ++k_0__) {
                    tot_obs_counts[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t tot_obs_counts_i_0_max__ = NRNA;
            size_t tot_obs_counts_i_1_max__ = NREP;
            for (size_t i_0__ = 0; i_0__ < tot_obs_counts_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < tot_obs_counts_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "tot_obs_counts[i_0__][i_1__]", tot_obs_counts[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("sup_obs_counts", "NRNA", NRNA);
            validate_non_negative_index("sup_obs_counts", "NREP", NREP);
            context__.validate_dims("data initialization", "sup_obs_counts", "int", context__.to_vec(NRNA,NREP));
            sup_obs_counts = std::vector<std::vector<int> >(NRNA, std::vector<int>(NREP, int(0)));
            vals_i__ = context__.vals_i("sup_obs_counts");
            pos__ = 0;
            size_t sup_obs_counts_k_0_max__ = NRNA;
            size_t sup_obs_counts_k_1_max__ = NREP;
            for (size_t k_1__ = 0; k_1__ < sup_obs_counts_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < sup_obs_counts_k_0_max__; ++k_0__) {
                    sup_obs_counts[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t sup_obs_counts_i_0_max__ = NRNA;
            size_t sup_obs_counts_i_1_max__ = NREP;
            for (size_t i_0__ = 0; i_0__ < sup_obs_counts_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < sup_obs_counts_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "sup_obs_counts[i_0__][i_1__]", sup_obs_counts[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("pel_obs_counts", "NRNA", NRNA);
            validate_non_negative_index("pel_obs_counts", "NREP", NREP);
            context__.validate_dims("data initialization", "pel_obs_counts", "int", context__.to_vec(NRNA,NREP));
            pel_obs_counts = std::vector<std::vector<int> >(NRNA, std::vector<int>(NREP, int(0)));
            vals_i__ = context__.vals_i("pel_obs_counts");
            pos__ = 0;
            size_t pel_obs_counts_k_0_max__ = NRNA;
            size_t pel_obs_counts_k_1_max__ = NREP;
            for (size_t k_1__ = 0; k_1__ < pel_obs_counts_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < pel_obs_counts_k_0_max__; ++k_0__) {
                    pel_obs_counts[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t pel_obs_counts_i_0_max__ = NRNA;
            size_t pel_obs_counts_i_1_max__ = NREP;
            for (size_t i_0__ = 0; i_0__ < pel_obs_counts_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < pel_obs_counts_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "pel_obs_counts[i_0__][i_1__]", pel_obs_counts[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 14;
            validate_non_negative_index("mean_log_tot_obs", "NRNA", NRNA);
            context__.validate_dims("data initialization", "mean_log_tot_obs", "double", context__.to_vec(NRNA));
            mean_log_tot_obs = std::vector<double>(NRNA, double(0));
            vals_r__ = context__.vals_r("mean_log_tot_obs");
            pos__ = 0;
            size_t mean_log_tot_obs_k_0_max__ = NRNA;
            for (size_t k_0__ = 0; k_0__ < mean_log_tot_obs_k_0_max__; ++k_0__) {
                mean_log_tot_obs[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 15;
            validate_non_negative_index("sd_log_tot_obs", "NRNA", NRNA);
            context__.validate_dims("data initialization", "sd_log_tot_obs", "double", context__.to_vec(NRNA));
            sd_log_tot_obs = std::vector<double>(NRNA, double(0));
            vals_r__ = context__.vals_r("sd_log_tot_obs");
            pos__ = 0;
            size_t sd_log_tot_obs_k_0_max__ = NRNA;
            for (size_t k_0__ = 0; k_0__ < sd_log_tot_obs_k_0_max__; ++k_0__) {
                sd_log_tot_obs[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "mixing_factor_total_guess_mean", "double", context__.to_vec());
            mixing_factor_total_guess_mean = double(0);
            vals_r__ = context__.vals_r("mixing_factor_total_guess_mean");
            pos__ = 0;
            mixing_factor_total_guess_mean = vals_r__[pos__++];
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "mixing_factor_total_guess_sd", "double", context__.to_vec());
            mixing_factor_total_guess_sd = double(0);
            vals_r__ = context__.vals_r("mixing_factor_total_guess_sd");
            pos__ = 0;
            mixing_factor_total_guess_sd = vals_r__[pos__++];
            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "mixing_factor_sup_guess_mean", "double", context__.to_vec());
            mixing_factor_sup_guess_mean = double(0);
            vals_r__ = context__.vals_r("mixing_factor_sup_guess_mean");
            pos__ = 0;
            mixing_factor_sup_guess_mean = vals_r__[pos__++];
            current_statement_begin__ = 22;
            context__.validate_dims("data initialization", "mixing_factor_sup_guess_sd", "double", context__.to_vec());
            mixing_factor_sup_guess_sd = double(0);
            vals_r__ = context__.vals_r("mixing_factor_sup_guess_sd");
            pos__ = 0;
            mixing_factor_sup_guess_sd = vals_r__[pos__++];
            current_statement_begin__ = 23;
            context__.validate_dims("data initialization", "mixing_factor_pellet_guess_mean", "double", context__.to_vec());
            mixing_factor_pellet_guess_mean = double(0);
            vals_r__ = context__.vals_r("mixing_factor_pellet_guess_mean");
            pos__ = 0;
            mixing_factor_pellet_guess_mean = vals_r__[pos__++];
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "mixing_factor_pellet_guess_sd", "double", context__.to_vec());
            mixing_factor_pellet_guess_sd = double(0);
            vals_r__ = context__.vals_r("mixing_factor_pellet_guess_sd");
            pos__ = 0;
            mixing_factor_pellet_guess_sd = vals_r__[pos__++];
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 29;
            validate_non_negative_index("mixing_factor_total", "NREP", NREP);
            num_params_r__ += (1 * NREP);
            current_statement_begin__ = 30;
            validate_non_negative_index("mixing_factor_sup", "NREP", NREP);
            num_params_r__ += (1 * NREP);
            current_statement_begin__ = 31;
            validate_non_negative_index("mixing_factor_pellet", "NREP", NREP);
            num_params_r__ += (1 * NREP);
            current_statement_begin__ = 35;
            validate_non_negative_index("phi", "3", 3);
            num_params_r__ += (1 * 3);
            current_statement_begin__ = 38;
            validate_non_negative_index("tot_latent_counts", "NRNA", NRNA);
            num_params_r__ += (1 * NRNA);
            current_statement_begin__ = 41;
            validate_non_negative_index("lopSup", "NRNA", NRNA);
            num_params_r__ += (1 * NRNA);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_SedSeqQuantReps() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 29;
        if (!(context__.contains_r("mixing_factor_total")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mixing_factor_total missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mixing_factor_total");
        pos__ = 0U;
        validate_non_negative_index("mixing_factor_total", "NREP", NREP);
        context__.validate_dims("parameter initialization", "mixing_factor_total", "double", context__.to_vec(NREP));
        std::vector<double> mixing_factor_total(NREP, double(0));
        size_t mixing_factor_total_k_0_max__ = NREP;
        for (size_t k_0__ = 0; k_0__ < mixing_factor_total_k_0_max__; ++k_0__) {
            mixing_factor_total[k_0__] = vals_r__[pos__++];
        }
        size_t mixing_factor_total_i_0_max__ = NREP;
        for (size_t i_0__ = 0; i_0__ < mixing_factor_total_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, mixing_factor_total[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mixing_factor_total: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 30;
        if (!(context__.contains_r("mixing_factor_sup")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mixing_factor_sup missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mixing_factor_sup");
        pos__ = 0U;
        validate_non_negative_index("mixing_factor_sup", "NREP", NREP);
        context__.validate_dims("parameter initialization", "mixing_factor_sup", "double", context__.to_vec(NREP));
        std::vector<double> mixing_factor_sup(NREP, double(0));
        size_t mixing_factor_sup_k_0_max__ = NREP;
        for (size_t k_0__ = 0; k_0__ < mixing_factor_sup_k_0_max__; ++k_0__) {
            mixing_factor_sup[k_0__] = vals_r__[pos__++];
        }
        size_t mixing_factor_sup_i_0_max__ = NREP;
        for (size_t i_0__ = 0; i_0__ < mixing_factor_sup_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, mixing_factor_sup[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mixing_factor_sup: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 31;
        if (!(context__.contains_r("mixing_factor_pellet")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mixing_factor_pellet missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mixing_factor_pellet");
        pos__ = 0U;
        validate_non_negative_index("mixing_factor_pellet", "NREP", NREP);
        context__.validate_dims("parameter initialization", "mixing_factor_pellet", "double", context__.to_vec(NREP));
        std::vector<double> mixing_factor_pellet(NREP, double(0));
        size_t mixing_factor_pellet_k_0_max__ = NREP;
        for (size_t k_0__ = 0; k_0__ < mixing_factor_pellet_k_0_max__; ++k_0__) {
            mixing_factor_pellet[k_0__] = vals_r__[pos__++];
        }
        size_t mixing_factor_pellet_i_0_max__ = NREP;
        for (size_t i_0__ = 0; i_0__ < mixing_factor_pellet_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, mixing_factor_pellet[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mixing_factor_pellet: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 35;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        validate_non_negative_index("phi", "3", 3);
        context__.validate_dims("parameter initialization", "phi", "double", context__.to_vec(3));
        std::vector<double> phi(3, double(0));
        size_t phi_k_0_max__ = 3;
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            phi[k_0__] = vals_r__[pos__++];
        }
        size_t phi_i_0_max__ = 3;
        for (size_t i_0__ = 0; i_0__ < phi_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, phi[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 38;
        if (!(context__.contains_r("tot_latent_counts")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tot_latent_counts missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tot_latent_counts");
        pos__ = 0U;
        validate_non_negative_index("tot_latent_counts", "NRNA", NRNA);
        context__.validate_dims("parameter initialization", "tot_latent_counts", "double", context__.to_vec(NRNA));
        std::vector<double> tot_latent_counts(NRNA, double(0));
        size_t tot_latent_counts_k_0_max__ = NRNA;
        for (size_t k_0__ = 0; k_0__ < tot_latent_counts_k_0_max__; ++k_0__) {
            tot_latent_counts[k_0__] = vals_r__[pos__++];
        }
        size_t tot_latent_counts_i_0_max__ = NRNA;
        for (size_t i_0__ = 0; i_0__ < tot_latent_counts_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, tot_latent_counts[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tot_latent_counts: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 41;
        if (!(context__.contains_r("lopSup")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lopSup missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lopSup");
        pos__ = 0U;
        validate_non_negative_index("lopSup", "NRNA", NRNA);
        context__.validate_dims("parameter initialization", "lopSup", "double", context__.to_vec(NRNA));
        std::vector<double> lopSup(NRNA, double(0));
        size_t lopSup_k_0_max__ = NRNA;
        for (size_t k_0__ = 0; k_0__ < lopSup_k_0_max__; ++k_0__) {
            lopSup[k_0__] = vals_r__[pos__++];
        }
        size_t lopSup_i_0_max__ = NRNA;
        for (size_t i_0__ = 0; i_0__ < lopSup_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(lopSup[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lopSup: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 29;
            std::vector<local_scalar_t__> mixing_factor_total;
            size_t mixing_factor_total_d_0_max__ = NREP;
            mixing_factor_total.reserve(mixing_factor_total_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < mixing_factor_total_d_0_max__; ++d_0__) {
                if (jacobian__)
                    mixing_factor_total.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    mixing_factor_total.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 30;
            std::vector<local_scalar_t__> mixing_factor_sup;
            size_t mixing_factor_sup_d_0_max__ = NREP;
            mixing_factor_sup.reserve(mixing_factor_sup_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < mixing_factor_sup_d_0_max__; ++d_0__) {
                if (jacobian__)
                    mixing_factor_sup.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    mixing_factor_sup.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 31;
            std::vector<local_scalar_t__> mixing_factor_pellet;
            size_t mixing_factor_pellet_d_0_max__ = NREP;
            mixing_factor_pellet.reserve(mixing_factor_pellet_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < mixing_factor_pellet_d_0_max__; ++d_0__) {
                if (jacobian__)
                    mixing_factor_pellet.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    mixing_factor_pellet.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 35;
            std::vector<local_scalar_t__> phi;
            size_t phi_d_0_max__ = 3;
            phi.reserve(phi_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
                if (jacobian__)
                    phi.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    phi.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 38;
            std::vector<local_scalar_t__> tot_latent_counts;
            size_t tot_latent_counts_d_0_max__ = NRNA;
            tot_latent_counts.reserve(tot_latent_counts_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < tot_latent_counts_d_0_max__; ++d_0__) {
                if (jacobian__)
                    tot_latent_counts.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    tot_latent_counts.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 41;
            std::vector<local_scalar_t__> lopSup;
            size_t lopSup_d_0_max__ = NRNA;
            lopSup.reserve(lopSup_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < lopSup_d_0_max__; ++d_0__) {
                if (jacobian__)
                    lopSup.push_back(in__.scalar_constrain(lp__));
                else
                    lopSup.push_back(in__.scalar_constrain());
            }
            // transformed parameters
            current_statement_begin__ = 45;
            validate_non_negative_index("pSup", "NRNA", NRNA);
            std::vector<local_scalar_t__> pSup(NRNA, local_scalar_t__(0));
            stan::math::initialize(pSup, DUMMY_VAR__);
            stan::math::fill(pSup, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 48;
            for (int i = 1; i <= NRNA; ++i) {
                current_statement_begin__ = 49;
                stan::model::assign(pSup, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            inv_logit(get_base1(lopSup, i, "lopSup", 1)), 
                            "assigning variable pSup");
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 45;
            size_t pSup_k_0_max__ = NRNA;
            for (size_t k_0__ = 0; k_0__ < pSup_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(pSup[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: pSup" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable pSup: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 55;
            lp_accum__.add(cauchy_log<propto__>(phi, 0, 3));
            current_statement_begin__ = 58;
            lp_accum__.add(normal_log<propto__>(lopSup, 0, 3));
            current_statement_begin__ = 61;
            for (int i = 1; i <= NRNA; ++i) {
                current_statement_begin__ = 62;
                lp_accum__.add(normal_log<propto__>(stan::math::log(get_base1(tot_latent_counts, i, "tot_latent_counts", 1)), get_base1(mean_log_tot_obs, i, "mean_log_tot_obs", 1), get_base1(sd_log_tot_obs, i, "sd_log_tot_obs", 1)));
                current_statement_begin__ = 63;
                lp_accum__.add(-(stan::math::log(get_base1(tot_latent_counts, i, "tot_latent_counts", 1))));
            }
            current_statement_begin__ = 65;
            lp_accum__.add(normal_log<propto__>(mixing_factor_total, mixing_factor_total_guess_mean, mixing_factor_total_guess_sd));
            current_statement_begin__ = 66;
            lp_accum__.add(normal_log<propto__>(mixing_factor_sup, mixing_factor_sup_guess_mean, mixing_factor_sup_guess_sd));
            current_statement_begin__ = 67;
            lp_accum__.add(normal_log<propto__>(mixing_factor_pellet, mixing_factor_pellet_guess_mean, mixing_factor_pellet_guess_sd));
            current_statement_begin__ = 69;
            for (int rep = 1; rep <= NREP; ++rep) {
                current_statement_begin__ = 70;
                for (int i = 1; i <= NRNA; ++i) {
                    current_statement_begin__ = 71;
                    lp_accum__.add(neg_binomial_2_log<propto__>(get_base1(get_base1(sup_obs_counts, i, "sup_obs_counts", 1), rep, "sup_obs_counts", 2), ((get_base1(tot_latent_counts, i, "tot_latent_counts", 1) * get_base1(pSup, i, "pSup", 1)) * get_base1(mixing_factor_sup, rep, "mixing_factor_sup", 1)), get_base1(phi, 1, "phi", 1)));
                    current_statement_begin__ = 72;
                    lp_accum__.add(neg_binomial_2_log<propto__>(get_base1(get_base1(pel_obs_counts, i, "pel_obs_counts", 1), rep, "pel_obs_counts", 2), ((get_base1(tot_latent_counts, i, "tot_latent_counts", 1) * (1 - get_base1(pSup, i, "pSup", 1))) * get_base1(mixing_factor_pellet, rep, "mixing_factor_pellet", 1)), get_base1(phi, 2, "phi", 1)));
                    current_statement_begin__ = 73;
                    lp_accum__.add(neg_binomial_2_log<propto__>(get_base1(get_base1(tot_obs_counts, i, "tot_obs_counts", 1), rep, "tot_obs_counts", 2), (get_base1(mixing_factor_total, rep, "mixing_factor_total", 1) * get_base1(tot_latent_counts, i, "tot_latent_counts", 1)), get_base1(phi, 3, "phi", 1)));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("mixing_factor_total");
        names__.push_back("mixing_factor_sup");
        names__.push_back("mixing_factor_pellet");
        names__.push_back("phi");
        names__.push_back("tot_latent_counts");
        names__.push_back("lopSup");
        names__.push_back("pSup");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(NREP);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(NREP);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(NREP);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(NRNA);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(NRNA);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(NRNA);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_SedSeqQuantReps_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> mixing_factor_total;
        size_t mixing_factor_total_d_0_max__ = NREP;
        mixing_factor_total.reserve(mixing_factor_total_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < mixing_factor_total_d_0_max__; ++d_0__) {
            mixing_factor_total.push_back(in__.scalar_lb_constrain(0));
        }
        size_t mixing_factor_total_k_0_max__ = NREP;
        for (size_t k_0__ = 0; k_0__ < mixing_factor_total_k_0_max__; ++k_0__) {
            vars__.push_back(mixing_factor_total[k_0__]);
        }
        std::vector<double> mixing_factor_sup;
        size_t mixing_factor_sup_d_0_max__ = NREP;
        mixing_factor_sup.reserve(mixing_factor_sup_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < mixing_factor_sup_d_0_max__; ++d_0__) {
            mixing_factor_sup.push_back(in__.scalar_lb_constrain(0));
        }
        size_t mixing_factor_sup_k_0_max__ = NREP;
        for (size_t k_0__ = 0; k_0__ < mixing_factor_sup_k_0_max__; ++k_0__) {
            vars__.push_back(mixing_factor_sup[k_0__]);
        }
        std::vector<double> mixing_factor_pellet;
        size_t mixing_factor_pellet_d_0_max__ = NREP;
        mixing_factor_pellet.reserve(mixing_factor_pellet_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < mixing_factor_pellet_d_0_max__; ++d_0__) {
            mixing_factor_pellet.push_back(in__.scalar_lb_constrain(0));
        }
        size_t mixing_factor_pellet_k_0_max__ = NREP;
        for (size_t k_0__ = 0; k_0__ < mixing_factor_pellet_k_0_max__; ++k_0__) {
            vars__.push_back(mixing_factor_pellet[k_0__]);
        }
        std::vector<double> phi;
        size_t phi_d_0_max__ = 3;
        phi.reserve(phi_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
            phi.push_back(in__.scalar_lb_constrain(0));
        }
        size_t phi_k_0_max__ = 3;
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            vars__.push_back(phi[k_0__]);
        }
        std::vector<double> tot_latent_counts;
        size_t tot_latent_counts_d_0_max__ = NRNA;
        tot_latent_counts.reserve(tot_latent_counts_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < tot_latent_counts_d_0_max__; ++d_0__) {
            tot_latent_counts.push_back(in__.scalar_lb_constrain(0));
        }
        size_t tot_latent_counts_k_0_max__ = NRNA;
        for (size_t k_0__ = 0; k_0__ < tot_latent_counts_k_0_max__; ++k_0__) {
            vars__.push_back(tot_latent_counts[k_0__]);
        }
        std::vector<double> lopSup;
        size_t lopSup_d_0_max__ = NRNA;
        lopSup.reserve(lopSup_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < lopSup_d_0_max__; ++d_0__) {
            lopSup.push_back(in__.scalar_constrain());
        }
        size_t lopSup_k_0_max__ = NRNA;
        for (size_t k_0__ = 0; k_0__ < lopSup_k_0_max__; ++k_0__) {
            vars__.push_back(lopSup[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 45;
            validate_non_negative_index("pSup", "NRNA", NRNA);
            std::vector<double> pSup(NRNA, double(0));
            stan::math::initialize(pSup, DUMMY_VAR__);
            stan::math::fill(pSup, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 48;
            for (int i = 1; i <= NRNA; ++i) {
                current_statement_begin__ = 49;
                stan::model::assign(pSup, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            inv_logit(get_base1(lopSup, i, "lopSup", 1)), 
                            "assigning variable pSup");
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t pSup_k_0_max__ = NRNA;
                for (size_t k_0__ = 0; k_0__ < pSup_k_0_max__; ++k_0__) {
                    vars__.push_back(pSup[k_0__]);
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_SedSeqQuantReps";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t mixing_factor_total_k_0_max__ = NREP;
        for (size_t k_0__ = 0; k_0__ < mixing_factor_total_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mixing_factor_total" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mixing_factor_sup_k_0_max__ = NREP;
        for (size_t k_0__ = 0; k_0__ < mixing_factor_sup_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mixing_factor_sup" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mixing_factor_pellet_k_0_max__ = NREP;
        for (size_t k_0__ = 0; k_0__ < mixing_factor_pellet_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mixing_factor_pellet" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_k_0_max__ = 3;
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t tot_latent_counts_k_0_max__ = NRNA;
        for (size_t k_0__ = 0; k_0__ < tot_latent_counts_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tot_latent_counts" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lopSup_k_0_max__ = NRNA;
        for (size_t k_0__ = 0; k_0__ < lopSup_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lopSup" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t pSup_k_0_max__ = NRNA;
            for (size_t k_0__ = 0; k_0__ < pSup_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "pSup" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t mixing_factor_total_k_0_max__ = NREP;
        for (size_t k_0__ = 0; k_0__ < mixing_factor_total_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mixing_factor_total" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mixing_factor_sup_k_0_max__ = NREP;
        for (size_t k_0__ = 0; k_0__ < mixing_factor_sup_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mixing_factor_sup" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t mixing_factor_pellet_k_0_max__ = NREP;
        for (size_t k_0__ = 0; k_0__ < mixing_factor_pellet_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mixing_factor_pellet" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_k_0_max__ = 3;
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t tot_latent_counts_k_0_max__ = NRNA;
        for (size_t k_0__ = 0; k_0__ < tot_latent_counts_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tot_latent_counts" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lopSup_k_0_max__ = NRNA;
        for (size_t k_0__ = 0; k_0__ < lopSup_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lopSup" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t pSup_k_0_max__ = NRNA;
            for (size_t k_0__ = 0; k_0__ < pSup_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "pSup" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_SedSeqQuantReps_namespace::model_SedSeqQuantReps stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
